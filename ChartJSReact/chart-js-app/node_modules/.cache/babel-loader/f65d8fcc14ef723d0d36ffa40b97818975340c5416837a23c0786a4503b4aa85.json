{"ast":null,"code":"var _jsxFileName = \"/Users/srinidhisasidharan/React/ChartJSReact/chart-js-app/src/RealTimeChart.js\",\n  _s = $RefreshSig$();\n// src/RealTimeChart.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RealTimeChart = () => {\n  _s();\n  const [data, setData] = useState([]);\n  // Use a ref to hold the interval ID\n  const intervalRef = useRef(null);\n  useEffect(() => {\n    // Start an interval to simulate data updates\n    // Warning: Updating every millisecond (1ms) may be too frequent for UI rendering.\n    // Here we use 100ms for demonstration. Adjust as needed.\n    intervalRef.current = setInterval(() => {\n      const now = Date.now(); // current timestamp in milliseconds\n      const newDataPoint = {\n        time: now,\n        value: Math.random() * 100 // simulate a random value\n      };\n      // Optionally, limit the number of data points to keep the chart performant.\n      setData(prevData => {\n        const newData = [...prevData, newDataPoint];\n        // Keep only the latest 100 points (for example)\n        return newData.length > 100 ? newData.slice(newData.length - 100) : newData;\n      });\n    }, 2); // 100ms interval\n\n    // Cleanup on component unmount\n    return () => clearInterval(intervalRef.current);\n  }, []);\n\n  // Format the time for the X axis\n  const formatTime = tick => {\n    const date = new Date(tick);\n    return date.toLocaleTimeString('en-US', {\n      hour12: false,\n      minute: '2-digit',\n      second: '2-digit',\n      millisecond: 'numeric'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Real-Time Data Chart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n      width: 800,\n      height: 400,\n      data: data,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        stroke: \"#ccc\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"time\",\n        domain: ['dataMin', 'dataMax'],\n        tickFormatter: formatTime,\n        type: \"number\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        labelFormatter: label => new Date(label).toLocaleTimeString()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"value\",\n        stroke: \"#8884d8\",\n        dot: false,\n        isAnimationActive: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(RealTimeChart, \"mZD6Bjx6jDauzVbsA4FJgQu1Bfc=\");\n_c = RealTimeChart;\nexport default RealTimeChart;\nvar _c;\n$RefreshReg$(_c, \"RealTimeChart\");","map":{"version":3,"names":["React","useState","useEffect","useRef","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","jsxDEV","_jsxDEV","RealTimeChart","_s","data","setData","intervalRef","current","setInterval","now","Date","newDataPoint","time","value","Math","random","prevData","newData","length","slice","clearInterval","formatTime","tick","date","toLocaleTimeString","hour12","minute","second","millisecond","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","stroke","dataKey","domain","tickFormatter","type","labelFormatter","label","dot","isAnimationActive","_c","$RefreshReg$"],"sources":["/Users/srinidhisasidharan/React/ChartJSReact/chart-js-app/src/RealTimeChart.js"],"sourcesContent":["// src/RealTimeChart.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\n\nconst RealTimeChart = () => {\n  const [data, setData] = useState([]);\n  // Use a ref to hold the interval ID\n  const intervalRef = useRef(null);\n\n  useEffect(() => {\n    // Start an interval to simulate data updates\n    // Warning: Updating every millisecond (1ms) may be too frequent for UI rendering.\n    // Here we use 100ms for demonstration. Adjust as needed.\n    intervalRef.current = setInterval(() => {\n      const now = Date.now(); // current timestamp in milliseconds\n      const newDataPoint = {\n        time: now,\n        value: Math.random() * 100, // simulate a random value\n      };\n      // Optionally, limit the number of data points to keep the chart performant.\n      setData(prevData => {\n        const newData = [...prevData, newDataPoint];\n        // Keep only the latest 100 points (for example)\n        return newData.length > 100 ? newData.slice(newData.length - 100) : newData;\n      });\n    }, 2); // 100ms interval\n\n    // Cleanup on component unmount\n    return () => clearInterval(intervalRef.current);\n  }, []);\n\n  // Format the time for the X axis\n  const formatTime = (tick) => {\n    const date = new Date(tick);\n    return date.toLocaleTimeString('en-US', { hour12: false, minute: '2-digit', second: '2-digit', millisecond: 'numeric' });\n  };\n\n  return (\n    <div>\n      <h2>Real-Time Data Chart</h2>\n      <LineChart width={800} height={400} data={data}>\n        <CartesianGrid stroke=\"#ccc\" />\n        <XAxis \n          dataKey=\"time\" \n          domain={['dataMin', 'dataMax']} \n          tickFormatter={formatTime}\n          type=\"number\"\n        />\n        <YAxis />\n        <Tooltip labelFormatter={(label) => new Date(label).toLocaleTimeString()} />\n        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" dot={false} isAnimationActive={false}/>\n      </LineChart>\n    </div>\n  );\n};\n\nexport default RealTimeChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}