{"ast":null,"code":"var _jsxFileName = \"/Users/srinidhisasidharan/React/ChartJSReact/chart-js-app/src/LineChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LineChart = () => {\n  _s();\n  // The chart state that is passed to the Line component.\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: \"DS1\",\n      backgroundColor: \"rgb(255, 99, 132)\",\n      borderColor: \"rgb(255, 99, 132)\",\n      data: [],\n      lineTension: 0.5\n    }]\n  });\n\n  // Use a ref to accumulate data points at a high frequency.\n  const dataBufferRef = useRef({\n    labels: [],\n    data: []\n  });\n  useEffect(() => {\n    // Fast interval: update the buffer every 2.5ms.\n    const fastInterval = setInterval(() => {\n      const now = new Date();\n      // Include milliseconds for higher resolution.\n      const timeString = `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}:${now.getMilliseconds()}`;\n      const value = Math.floor(Math.random() * 1000);\n\n      // Append new data to the buffer.\n      dataBufferRef.current.labels.push(timeString);\n      dataBufferRef.current.data.push(value);\n\n      // Maintain a window of 400 points.\n      const windowSize = 400;\n      if (dataBufferRef.current.labels.length > windowSize) {\n        dataBufferRef.current.labels.shift();\n        dataBufferRef.current.data.shift();\n      }\n    }, 2.5);\n\n    // Slow interval: update the React state every 50ms.\n    const slowInterval = setInterval(() => {\n      setChartData({\n        labels: [...dataBufferRef.current.labels],\n        datasets: [{\n          label: \"DS1\",\n          backgroundColor: \"rgb(255, 99, 132)\",\n          borderColor: \"rgb(255, 99, 132)\",\n          data: [...dataBufferRef.current.data],\n          lineTension: 0.5\n        }]\n      });\n    }, 50);\n\n    // Clear intervals when the component unmounts.\n    return () => {\n      clearInterval(fastInterval);\n      clearInterval(slowInterval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"300px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(LineChart, \"JwZ1JwyDGDVeBh7TYvDGTQedqVc=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Line","jsxDEV","_jsxDEV","LineChart","_s","chartData","setChartData","labels","datasets","label","backgroundColor","borderColor","data","lineTension","dataBufferRef","fastInterval","setInterval","now","Date","timeString","getHours","getMinutes","getSeconds","getMilliseconds","value","Math","floor","random","current","push","windowSize","length","shift","slowInterval","clearInterval","style","width","height","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/srinidhisasidharan/React/ChartJSReact/chart-js-app/src/LineChart.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst LineChart = () => {\n  // The chart state that is passed to the Line component.\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: [{\n      label: \"DS1\",\n      backgroundColor: \"rgb(255, 99, 132)\",\n      borderColor: \"rgb(255, 99, 132)\",\n      data: [],\n      lineTension: 0.5,\n    }],\n  });\n\n  // Use a ref to accumulate data points at a high frequency.\n  const dataBufferRef = useRef({\n    labels: [],\n    data: [],\n  });\n\n  useEffect(() => {\n    // Fast interval: update the buffer every 2.5ms.\n    const fastInterval = setInterval(() => {\n      const now = new Date();\n      // Include milliseconds for higher resolution.\n      const timeString = `${now.getHours()}:${now.getMinutes()}:${now.getSeconds()}:${now.getMilliseconds()}`;\n      const value = Math.floor(Math.random() * 1000);\n      \n      // Append new data to the buffer.\n      dataBufferRef.current.labels.push(timeString);\n      dataBufferRef.current.data.push(value);\n\n      // Maintain a window of 400 points.\n      const windowSize = 400;\n      if (dataBufferRef.current.labels.length > windowSize) {\n        dataBufferRef.current.labels.shift();\n        dataBufferRef.current.data.shift();\n      }\n    }, 2.5);\n\n    // Slow interval: update the React state every 50ms.\n    const slowInterval = setInterval(() => {\n      setChartData({\n        labels: [...dataBufferRef.current.labels],\n        datasets: [{\n          label: \"DS1\",\n          backgroundColor: \"rgb(255, 99, 132)\",\n          borderColor: \"rgb(255, 99, 132)\",\n          data: [...dataBufferRef.current.data],\n          lineTension: 0.5,\n        }],\n      });\n    }, 50);\n\n    // Clear intervals when the component unmounts.\n    return () => {\n      clearInterval(fastInterval);\n      clearInterval(slowInterval);\n    };\n  }, []);\n\n  return (\n    <div style={{ width: \"100%\", height: \"300px\" }}>\n      <Line data={chartData} />\n    </div>\n  );\n};\n\nexport default LineChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}