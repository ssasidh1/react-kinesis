{"ast":null,"code":"var _jsxFileName = \"/Users/srinidhisasidharan/React/kinesisData/kinesis-store/src/App.js\";\nimport logo from './logo.svg';\nimport './App.css';\nimport RealTimeChart from './RealTimeChart';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  if (window.Worker) {\n    const dataGenWorker = new Worker('dataGeneratorWorker.js');\n\n    // Listen for messages from the worker (for logging or UI feedback)\n    dataGenWorker.onmessage = function (event) {\n      const {\n        type,\n        record,\n        response,\n        error\n      } = event.data;\n      if (type === 'recordSent') {\n        console.log('Record generated and sent from worker:', record, response);\n      } else if (type === 'error') {\n        console.error('Worker encountered an error:', error);\n      }\n    };\n\n    // Optionally, you can terminate the worker when needed:\n    // dataGenWorker.terminate();\n  } else {\n    console.error('Web Workers are not supported in this browser.');\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(RealTimeChart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["logo","RealTimeChart","jsxDEV","_jsxDEV","App","window","Worker","dataGenWorker","onmessage","event","type","record","response","error","data","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/srinidhisasidharan/React/kinesisData/kinesis-store/src/App.js"],"sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport RealTimeChart from './RealTimeChart';\n\nfunction App() {\n  if (window.Worker) {\n    const dataGenWorker = new Worker('dataGeneratorWorker.js');\n  \n    // Listen for messages from the worker (for logging or UI feedback)\n    dataGenWorker.onmessage = function(event) {\n      const { type, record, response, error } = event.data;\n      if (type === 'recordSent') {\n        console.log('Record generated and sent from worker:', record, response);\n      } else if (type === 'error') {\n        console.error('Worker encountered an error:', error);\n      }\n    };\n  \n    // Optionally, you can terminate the worker when needed:\n    // dataGenWorker.terminate();\n  } else {\n    console.error('Web Workers are not supported in this browser.');\n  }\n  return (\n    <div className=\"App\">\n      <RealTimeChart />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,IAAI,MAAM,YAAY;AAC7B,OAAO,WAAW;AAClB,OAAOC,aAAa,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EACb,IAAIC,MAAM,CAACC,MAAM,EAAE;IACjB,MAAMC,aAAa,GAAG,IAAID,MAAM,CAAC,wBAAwB,CAAC;;IAE1D;IACAC,aAAa,CAACC,SAAS,GAAG,UAASC,KAAK,EAAE;MACxC,MAAM;QAAEC,IAAI;QAAEC,MAAM;QAAEC,QAAQ;QAAEC;MAAM,CAAC,GAAGJ,KAAK,CAACK,IAAI;MACpD,IAAIJ,IAAI,KAAK,YAAY,EAAE;QACzBK,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEL,MAAM,EAAEC,QAAQ,CAAC;MACzE,CAAC,MAAM,IAAIF,IAAI,KAAK,OAAO,EAAE;QAC3BK,OAAO,CAACF,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;;IAED;IACA;EACF,CAAC,MAAM;IACLE,OAAO,CAACF,KAAK,CAAC,gDAAgD,CAAC;EACjE;EACA,oBACEV,OAAA;IAAKc,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBf,OAAA,CAACF,aAAa;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACd,CAAC;AAEV;AAACC,EAAA,GAxBQnB,GAAG;AA0BZ,eAAeA,GAAG;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}